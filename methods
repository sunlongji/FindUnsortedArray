//find the smallest unsorted subarray in an array;
import java.util.*;

public class Solution {
	List<Integer> findMinUnsortedSubArray(int[] nums) {        
        List<Integer> res = new ArrayList<>(2);
        if (nums == null || nums.length == 0) return res;
        int n = nums.length;
        int left = 0, right = n - 1;
        while (left < n - 1 && nums[left] <= nums[left + 1]) ++left;
        if (left == n - 1) return res;
        while (right > 0 && nums[right] >= nums[right - 1]) --right;
        int rightMin = Integer.MAX_VALUE, leftMax = Integer.MIN_VALUE;
        // may be replaced by binary search
        for (int i=left+1; i<n; ++i) {
            rightMin = Math.min(rightMin, nums[i]);
        }
        for (int i=0; i<right; ++i) {
            leftMax = Math.max(leftMax, nums[i]);
        }
        int leftSub = 0, rightSub = n - 1;
        while (leftSub <= left && nums[leftSub] <= rightMin) ++leftSub;
        while (rightSub >= right && nums[rightSub] >= leftMax) -- rightSub;
        if (leftSub >= rightSub) return res;
        res.add(leftSub);
        res.add(rightSub);
        return res;
    }
	List<Integer> findMinUnsortedSubArrayII(int[] nums){
		List<Integer> res = new ArrayList<>(2);
	    int n = nums.length;
	    if (n==0) return res;
	    int i=0, j=n-1;
	    while (i<n-1 && nums[i+1]>=nums[i]) i++;
	    if (i==n-1) return res;
	    while (j>0 && nums[j-1]<=nums[j]) j--;
	    int start=i, end=j;
	    for (int k=start; k<=end; k++){
	        while (i>=0 && nums[i]>nums[k]) i--;
	        while (j<=n-1 && nums[j]<nums[k]) j++;
	    }
	    res.add(i+1);
	    res.add(j-1);
	    return res;
	}
	public int findUnsortedSubarrayIII(int[] nums) {
        if(nums.length<=1)  return 0;
        int n=nums.length;
        int start=-1, end=-2, max=nums[0], min=nums[n-1];
        for(int i=1;i<n;i++){
            max=Math.max(max,nums[i]);
            min=Math.min(min,nums[n-1-i]);
            if(nums[i]<max) end=i;
            if(nums[n-1-i]>min) start=n-1-i;
        }
        return end-start+1;
    }
  }
